{"version":3,"sources":["asset/img/mov2.png","redux/utils/setAuthorizationToken.ts","redux/login/login.types.ts","redux/login/login.reducers.ts","redux/movies/movies.reducers.ts","redux/movies/movies.types.ts","redux/root-reducer.ts","redux/login/login.actions.ts","component/page/login/Login.tsx","component/page/movie/MovieList.tsx","component/page/movie/EmptyMovieList.tsx","component/page/movie/MovieView.tsx","component/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","setAuthorizationToken","token","axios","defaults","headers","common","defaultState","isAuthenticeted","user","initialState","loading","movies","error","movieReducer","state","action","type","payload","combineReducers","login","isAuthenticated","isEmpty","setCurrentUser","identifier","password","method","url","data","then","response","jwt","localStorage","setItem","createStore","rootReducer","applyMiddleware","thunk","dispatch","jwtDecode","history","createHistory","require","createBrowserHistory","push","window","location","reload","Login","showErrorMessage","render","className","message","onFinish","values","setState","email","catch","onFinishFailed","errorInfo","console","log","layout","md","sm","Item","name","rules","required","htmlType","React","Component","connect","MovieList","showSuccessMessage","src","alt","to","getItem","this","removeItem","EmptyMovieList","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","isJpgOrPng","isLt2M","size","MovieView","imageUrl","handleChange","info","status","originFileObj","uploadButton","LoadingOutlined","PlusOutlined","pattern","RegExp","listType","showUploadList","onChange","style","width","App","unsubscribeFromAuth","exact","path","undefined","length","component","Boolean","hostname","match","store","jwtToken","JWT","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.28fb17b3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mov2.2c4cea31.png\";","import axios from \"axios\";\r\n\r\nexport default function setAuthorizationToken(token: string) {\r\n  if (token) {\r\n    axios.defaults.headers.common[\"Authorization\"] = \"Bearer \" + token;\r\n  } else {\r\n    delete axios.defaults.headers.common[\"Authorization\"];\r\n  }\r\n}\r\n","export const SET_CURRENT_USER = \"SET_CURRENT_USER\";\r\n","import { SET_CURRENT_USER } from \"./login.types\";\r\nimport isEmpty from \"lodash/isEmpty\";\r\n\r\nconst defaultState = {\r\n  isAuthenticeted: false,\r\n  user: {},\r\n};\r\n\r\nexport default (state = defaultState, action: any = {}) => {\r\n  switch (action.type) {\r\n    case SET_CURRENT_USER:\r\n      return {\r\n        isAuthenticated: !isEmpty(action.user),\r\n        user: action.user,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { FETCH_MOVIES_REQUEST, FETCH_MOVIES_SUCCESS } from \"./movies.types\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  movies: [],\r\n  error: \"\",\r\n};\r\n\r\nconst movieReducer = (state = initialState, action: any) => {\r\n  switch (action.type) {\r\n    case FETCH_MOVIES_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_MOVIES_SUCCESS:\r\n      return {\r\n        loading: false,\r\n        movies: action.payload,\r\n        error: \"\",\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default movieReducer;\r\n","export const FETCH_MOVIES_REQUEST = \"FETCH_MOVIES_REQUEST\";\r\nexport const FETCH_MOVIES_SUCCESS = \"FETCH_MOVIES_SUCCESS\";\r\n","import { combineReducers } from \"redux\";\r\n\r\nimport login from \"./login/login.reducers\";\r\nimport movieReducer from \"./movies/movies.reducers\";\r\n\r\nexport default combineReducers({\r\n  login,\r\n  movieReducer,\r\n});\r\n","import axios from \"axios\";\r\nimport setAuthorizationToken from \"./../utils/setAuthorizationToken\";\r\nimport { SET_CURRENT_USER } from \"./login.types\";\r\nimport jwtDecode from \"jwt-decode\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"../root-reducer\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nexport function setCurrentUser(user: any) {\r\n  return {\r\n    type: SET_CURRENT_USER,\r\n    user,\r\n  };\r\n}\r\n\r\nexport function login(identifier: string, password: string) {\r\n  return axios({\r\n    method: \"post\",\r\n    url: \"https://zm-job-application.herokuapp.com/auth/local\",\r\n    data: {\r\n      identifier: identifier,\r\n      password: password,\r\n    },\r\n  }).then(function (response: any) {\r\n    const token = response.data.jwt;\r\n    localStorage.setItem(\"jwt\", token);\r\n    setAuthorizationToken(token);\r\n    let store = createStore(rootReducer, applyMiddleware(thunk));\r\n    store.dispatch(setCurrentUser(jwtDecode(token)));\r\n    const createHistory = require(\"history\").createBrowserHistory;\r\n    let history = createHistory();\r\n    localStorage.setItem(\"isLogedIn\", \"true\");\r\n    history.push(\"/\");\r\n    window.location.reload();\r\n  });\r\n}\r\n","import React from \"react\";\r\nimport { Input, Form, Row, Col, Button, Alert } from \"antd\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../../redux/login/login.actions\";\r\n\r\nimport \"../../../asset/style/login.scss\";\r\nimport \"antd/dist/antd.css\";\r\n\r\ninterface ILoginViewState {\r\n  showErrorMessage: boolean;\r\n}\r\n\r\nclass Login extends React.Component<ILoginViewState> {\r\n  state: ILoginViewState = {\r\n    showErrorMessage: false,\r\n  };\r\n\r\n  render = () => {\r\n    const onFinish = (values: any) => {\r\n      this.setState({ showErrorMessage: false });\r\n      login(values.email, values.password).catch((error) => {\r\n        this.setState({ showErrorMessage: true });\r\n      });\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n      console.log(\"Failed:\", errorInfo);\r\n    };\r\n    return (\r\n      <div className=\"login\">\r\n        <div className=\"login_container\">\r\n          {this.state.showErrorMessage ? (\r\n            <Alert\r\n              className=\"login_error_alert\"\r\n              message=\"Neuspješna prijava\"\r\n              type=\"error\"\r\n            />\r\n          ) : null}\r\n          <div className=\"login_form_container\">\r\n            <div className=\"login_form\">\r\n              <Form\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                layout=\"vertical\"\r\n                className=\"login_loginForm\"\r\n              >\r\n                <Row>\r\n                  <Col md={12} sm={24}>\r\n                    <div className=\"login_loginForm\">\r\n                      <div className=\"login_welcomeMessage\">\r\n                        <p>Login</p>\r\n                      </div>\r\n                      <span className=\"input_tag\">{\"Email*\"}</span>\r\n                      <Form.Item\r\n                        name=\"email\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Email can not be empty\",\r\n                          },\r\n                          {\r\n                            type: \"email\",\r\n                            message: \"This is not email\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input />\r\n                      </Form.Item>\r\n                      <span className=\"input_tag\">{\"Password*\"}</span>\r\n                      <Form.Item\r\n                        name=\"password\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Password can not be empty\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        <Input type=\"password\" />\r\n                      </Form.Item>\r\n\r\n                      <Form.Item>\r\n                        <div className=\"login_loginButton\">\r\n                          <Button htmlType=\"submit\">{\"Sign in\"}</Button>\r\n                        </div>\r\n                      </Form.Item>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n          <div className=\"login_logo_container\">\r\n            <div className=\"login_logo\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default connect(null, { login })(Login);\r\n","import React from \"react\";\r\nimport \"../../../asset/style/movieList.scss\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Alert, Button } from \"antd\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\ninterface IMovieListViewState {\r\n  showSuccessMessage: boolean;\r\n}\r\n\r\nclass MovieList extends React.Component {\r\n  state: IMovieListViewState = {\r\n    showSuccessMessage: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (localStorage.getItem(\"isLogedIn\") === \"true\") {\r\n      this.setState({ showSuccessMessage: true });\r\n      localStorage.removeItem(\"isLogedIn\");\r\n    } else if (localStorage.getItem(\"isLogedIn\") === \"false\") {\r\n      this.setState({ showSuccessMessage: false });\r\n    }\r\n  }\r\n\r\n  render = () => {\r\n    return (\r\n      <div className=\"movie_list\">\r\n        {this.state.showSuccessMessage ? (\r\n          <Alert\r\n            className=\"login_success_alert\"\r\n            message=\"Uspješno ste se ulogirali\"\r\n            type=\"success\"\r\n          />\r\n        ) : null}\r\n        <div className=\"movie_list_container\">\r\n          <div className=\"movie_list_title\">\r\n            <p>Movies</p>\r\n          </div>\r\n          <div className=\"movie_list_section_title_container\">\r\n            <p>Cover image</p>\r\n            <p>Title</p>\r\n            <p>Publication year</p>\r\n            <p>Options</p>\r\n          </div>\r\n          <div className=\"movie_list_movie_container\">\r\n            <div className=\"movie_img\">\r\n              <div>\r\n                <img src={require(\"../../../asset/img/mov2.png\")} alt=\"movie\" />\r\n              </div>\r\n            </div>\r\n            <div>\r\n              <p className=\"movie_title\"> Some Swedish indie movie</p>\r\n            </div>\r\n            <div className=\"movie_year\">\r\n              <p>2011</p>\r\n            </div>\r\n            <div>\r\n              <div>\r\n                <Link className=\"edit_movie\" to=\"/movieView\">\r\n                  {\"Edit\"}\r\n                </Link>\r\n              </div>\r\n              <br />\r\n              <div className=\"delete_movie_container\">\r\n                <Link className=\"delete_movie\" to=\"/movieView\">\r\n                  {\"Delete\"}\r\n                </Link>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <hr />\r\n          <div className=\"movie_list_create_button_container\">\r\n            <Link to=\"/movieView\">\r\n              <Button>{\"Create a new movie\"}</Button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\r\nimport { Button } from \"antd\";\r\n\r\nimport \"../../../asset/style/emptyMovieList.scss\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction EmptyMovieList() {\r\n  return (\r\n    <div className=\"empty_movie_list_container\">\r\n      <div className=\"empty_movie_list_title_container\">\r\n        <span className=\"empty_movie_list_title\">\r\n          {\"Your movie list is empty\"}\r\n        </span>\r\n      </div>\r\n      <div className=\"empty_movie_list_button_container\">\r\n        <Link to=\"/movieView\">\r\n          <Button>{\"Create a new movie\"}</Button>\r\n        </Link>\r\n      </div>\r\n      <div className=\"empty_movie_list_img_container\">\r\n        <div className=\"empty_movie_list_img\"></div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default EmptyMovieList;\r\n","import React from \"react\";\r\nimport { Input, Form, Row, Col, Button, Upload, message } from \"antd\";\r\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\r\n\r\nimport \"../../../asset/style/movieView.scss\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction getBase64(img: any, callback: any) {\r\n  const reader = new FileReader();\r\n  reader.addEventListener(\"load\", () => callback(reader.result));\r\n  reader.readAsDataURL(img);\r\n}\r\n\r\nfunction beforeUpload(file: File) {\r\n  const isJpgOrPng = file.type === \"image/jpeg\" || file.type === \"image/png\";\r\n  if (!isJpgOrPng) {\r\n    message.error(\"You can only upload JPG/PNG file!\");\r\n  }\r\n  const isLt2M = file.size / 1024 / 1024 < 2;\r\n  if (!isLt2M) {\r\n    message.error(\"Image must smaller than 2MB!\");\r\n  }\r\n  return isJpgOrPng && isLt2M;\r\n}\r\n\r\nclass MovieView extends React.Component {\r\n  componentDidMount() {}\r\n\r\n  state = {\r\n    imageUrl: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  handleChange = (info: any) => {\r\n    if (info.file.status === \"uploading\") {\r\n      this.setState({ loading: true });\r\n      return;\r\n    }\r\n    if (info.file.status === \"done\") {\r\n      // Get this url from response in real world.\r\n      getBase64(info.file.originFileObj, (imageUrl: string) =>\r\n        this.setState({\r\n          imageUrl,\r\n          loading: false,\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  render = () => {\r\n    const uploadButton = (\r\n      <div>\r\n        {this.state.loading ? <LoadingOutlined /> : <PlusOutlined />}\r\n        <div className=\"ant-upload-text\">Upload</div>\r\n      </div>\r\n    );\r\n\r\n    const onFinish = (values: any) => {\r\n      console.log(\"Success:\", values);\r\n    };\r\n\r\n    const onFinishFailed = (errorInfo: any) => {\r\n      console.log(\"Failed:\", errorInfo);\r\n    };\r\n\r\n    const { imageUrl } = this.state;\r\n    return (\r\n      <div className=\"movie_view\">\r\n        <div className=\"movie_view_container\">\r\n          <div className=\"movie_view_form_container\">\r\n            <div className=\"movie_view_form\">\r\n              <Form\r\n                onFinish={onFinish}\r\n                onFinishFailed={onFinishFailed}\r\n                layout=\"vertical\"\r\n                className=\"movie_view_movieForm\"\r\n              >\r\n                <div className=\"movie_view_title\">\r\n                  <p>Create a new movie</p>\r\n                </div>\r\n                <Row>\r\n                  <Col md={12} sm={24}>\r\n                    <div className=\"movie_view_movieForm\">\r\n                      <span className=\"input_tag\">{\"Title*\"}</span>\r\n                      <Form.Item\r\n                        name=\"title\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Title can not be empty\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        {<Input />}\r\n                      </Form.Item>\r\n                      <span className=\"input_tag\">{\"Publication year\"}</span>\r\n                      <Form.Item\r\n                        name=\"publicationYear\"\r\n                        rules={[\r\n                          {\r\n                            pattern: new RegExp(\"^[12][0-9]{3}$\"),\r\n                            message: \"This is not a year\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        {<Input />}\r\n                      </Form.Item>\r\n                      <span className=\"input_tag\">{\"Cover image*\"}</span>\r\n                      <Form.Item\r\n                        name=\"title\"\r\n                        rules={[\r\n                          {\r\n                            required: true,\r\n                            message: \"Cover image can not be empty\",\r\n                          },\r\n                        ]}\r\n                      >\r\n                        {\r\n                          <Upload\r\n                            name=\"avatar\"\r\n                            listType=\"picture-card\"\r\n                            className=\"avatar-uploader\"\r\n                            showUploadList={false}\r\n                            action=\"https://www.mocky.io/v2/5cc8019d300000980a055e76\"\r\n                            beforeUpload={beforeUpload}\r\n                            onChange={this.handleChange}\r\n                          >\r\n                            {imageUrl ? (\r\n                              <img\r\n                                src={imageUrl}\r\n                                alt=\"avatar\"\r\n                                style={{ width: \"100%\" }}\r\n                              />\r\n                            ) : (\r\n                              uploadButton\r\n                            )}\r\n                          </Upload>\r\n                        }\r\n                      </Form.Item>\r\n                      <Form.Item>\r\n                        <div className=\"movie_view_button_container\">\r\n                          <Link to=\"/\">\r\n                            <Button className=\"btn-cancel\">{\"Cancel\"}</Button>\r\n                          </Link>\r\n                          <Button className=\"btn_create\" htmlType=\"submit\">\r\n                            {\"Create\"}\r\n                          </Button>\r\n                        </div>\r\n                      </Form.Item>\r\n                    </div>\r\n                  </Col>\r\n                </Row>\r\n              </Form>\r\n            </div>\r\n          </div>\r\n          <div className=\"movie_view_logo_container\">\r\n            <div className=\"movie_view_logo\" />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n}\r\n\r\nexport default MovieView;\r\n","import React from \"react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\n\nimport Login from \"./page/login/Login\";\nimport MovieList from \"./page/movie/MovieList\";\nimport EmptyMovieList from \"./page/movie/EmptyMovieList\";\nimport MovieView from \"./page/movie/MovieView\";\n\nclass App extends React.Component {\n  unsubscribeFromAuth = null;\n\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() =>\n              localStorage.getItem(\"jwt\")?.length === undefined ? (\n                <Redirect to=\"/login\" />\n              ) : (\n                <MovieList />\n              )\n            }\n          />\n          <Route exact path=\"/emptyMovieList\" component={EmptyMovieList} />\n          <Route exact path=\"/movieView\" component={MovieView} />\n          <Route exact path=\"/login\" component={Login} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport \"./index.css\";\nimport App from \"./component/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\nimport setAuthorizationToken from \"./redux/utils/setAuthorizationToken\";\nimport rootReducer from \"./redux/root-reducer\";\nimport { setCurrentUser } from \"./redux/login/login.actions\";\nimport * as JWT from \"jwt-decode\";\n\nlet store = createStore(rootReducer, applyMiddleware(thunk));\n\nif (localStorage.jwtToken) {\n  setAuthorizationToken(localStorage.jwtToken);\n  store.dispatch(setCurrentUser(JWT.default(localStorage.jwtToken)));\n}\n\nReactDOM.render(\n  <Provider store={store}>\n    <HashRouter>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </HashRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}